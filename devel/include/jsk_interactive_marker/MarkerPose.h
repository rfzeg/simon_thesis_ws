// Generated by gencpp from file jsk_interactive_marker/MarkerPose.msg
// DO NOT EDIT!


#ifndef JSK_INTERACTIVE_MARKER_MESSAGE_MARKERPOSE_H
#define JSK_INTERACTIVE_MARKER_MESSAGE_MARKERPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace jsk_interactive_marker
{
template <class ContainerAllocator>
struct MarkerPose_
{
  typedef MarkerPose_<ContainerAllocator> Type;

  MarkerPose_()
    : type(0)
    , pose()
    , marker_name()  {
    }
  MarkerPose_(const ContainerAllocator& _alloc)
    : type(0)
    , pose(_alloc)
    , marker_name(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _marker_name_type;
  _marker_name_type marker_name;


    enum { GENERAL = 0u };
     enum { HEAD_MARKER = 1u };
     enum { RHAND_MARKER = 2u };
     enum { LHAND_MARKER = 3u };
     enum { RLEG_MARKER = 4u };
     enum { LLEG_MARKER = 5u };
     enum { BASE_MARKER = 6u };
     enum { RFINGER_MARKER = 7u };
     enum { LFINGER_MARKER = 8u };
     enum { SPHERE_MARKER = 9u };
 

  typedef boost::shared_ptr< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> const> ConstPtr;

}; // struct MarkerPose_

typedef ::jsk_interactive_marker::MarkerPose_<std::allocator<void> > MarkerPose;

typedef boost::shared_ptr< ::jsk_interactive_marker::MarkerPose > MarkerPosePtr;
typedef boost::shared_ptr< ::jsk_interactive_marker::MarkerPose const> MarkerPoseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_interactive_marker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'jsk_interactive_marker': ['/home/simoneforno/simon_ws/src/jsk_visualization/jsk_interactive_markers/jsk_interactive_marker/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/kinetic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/kinetic/share/jsk_recognition_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbb82805055f8f87cec211c5459c476c";
  }

  static const char* value(const ::jsk_interactive_marker::MarkerPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbb82805055f8f87ULL;
  static const uint64_t static_value2 = 0xcec211c5459c476cULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_interactive_marker/MarkerPose";
  }

  static const char* value(const ::jsk_interactive_marker::MarkerPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 GENERAL=0\n\
uint8 HEAD_MARKER=1\n\
uint8 RHAND_MARKER=2\n\
uint8 LHAND_MARKER=3\n\
uint8 RLEG_MARKER=4\n\
uint8 LLEG_MARKER=5\n\
uint8 BASE_MARKER=6\n\
uint8 RFINGER_MARKER=7\n\
uint8 LFINGER_MARKER=8\n\
uint8 SPHERE_MARKER=9\n\
\n\
int8 type\n\
geometry_msgs/PoseStamped pose\n\
string marker_name\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::jsk_interactive_marker::MarkerPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.pose);
      stream.next(m.marker_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MarkerPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_interactive_marker::MarkerPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_interactive_marker::MarkerPose_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "marker_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.marker_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_INTERACTIVE_MARKER_MESSAGE_MARKERPOSE_H
