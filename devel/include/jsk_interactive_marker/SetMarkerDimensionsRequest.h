// Generated by gencpp from file jsk_interactive_marker/SetMarkerDimensionsRequest.msg
// DO NOT EDIT!


#ifndef JSK_INTERACTIVE_MARKER_MESSAGE_SETMARKERDIMENSIONSREQUEST_H
#define JSK_INTERACTIVE_MARKER_MESSAGE_SETMARKERDIMENSIONSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jsk_interactive_marker/MarkerDimensions.h>

namespace jsk_interactive_marker
{
template <class ContainerAllocator>
struct SetMarkerDimensionsRequest_
{
  typedef SetMarkerDimensionsRequest_<ContainerAllocator> Type;

  SetMarkerDimensionsRequest_()
    : target_name()
    , dimensions()  {
    }
  SetMarkerDimensionsRequest_(const ContainerAllocator& _alloc)
    : target_name(_alloc)
    , dimensions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_name_type;
  _target_name_type target_name;

   typedef  ::jsk_interactive_marker::MarkerDimensions_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;




  typedef boost::shared_ptr< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetMarkerDimensionsRequest_

typedef ::jsk_interactive_marker::SetMarkerDimensionsRequest_<std::allocator<void> > SetMarkerDimensionsRequest;

typedef boost::shared_ptr< ::jsk_interactive_marker::SetMarkerDimensionsRequest > SetMarkerDimensionsRequestPtr;
typedef boost::shared_ptr< ::jsk_interactive_marker::SetMarkerDimensionsRequest const> SetMarkerDimensionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_interactive_marker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'jsk_interactive_marker': ['/home/simoneforno/simon_ws/src/jsk_visualization/jsk_interactive_markers/jsk_interactive_marker/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/kinetic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/kinetic/share/jsk_recognition_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68f212be16364271f11f516c3f033749";
  }

  static const char* value(const ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68f212be16364271ULL;
  static const uint64_t static_value2 = 0xf11f516c3f033749ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_interactive_marker/SetMarkerDimensionsRequest";
  }

  static const char* value(const ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string target_name\n\
MarkerDimensions dimensions\n\
\n\
================================================================================\n\
MSG: jsk_interactive_marker/MarkerDimensions\n\
float32 x\n\
float32 y\n\
float32 z\n\
float32 radius\n\
float32 small_radius\n\
int32 type\n\
";
  }

  static const char* value(const ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_name);
      stream.next(m.dimensions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetMarkerDimensionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_interactive_marker::SetMarkerDimensionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_name);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::jsk_interactive_marker::MarkerDimensions_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_INTERACTIVE_MARKER_MESSAGE_SETMARKERDIMENSIONSREQUEST_H
