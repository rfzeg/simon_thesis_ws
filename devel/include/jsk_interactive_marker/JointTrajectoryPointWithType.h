// Generated by gencpp from file jsk_interactive_marker/JointTrajectoryPointWithType.msg
// DO NOT EDIT!


#ifndef JSK_INTERACTIVE_MARKER_MESSAGE_JOINTTRAJECTORYPOINTWITHTYPE_H
#define JSK_INTERACTIVE_MARKER_MESSAGE_JOINTTRAJECTORYPOINTWITHTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_interactive_marker
{
template <class ContainerAllocator>
struct JointTrajectoryPointWithType_
{
  typedef JointTrajectoryPointWithType_<ContainerAllocator> Type;

  JointTrajectoryPointWithType_()
    : type(0)
    , args()
    , wait(false)
    , positions()
    , velocities()
    , accelerations()
    , effort()
    , time_from_start()  {
    }
  JointTrajectoryPointWithType_(const ContainerAllocator& _alloc)
    : type(0)
    , args(_alloc)
    , wait(false)
    , positions(_alloc)
    , velocities(_alloc)
    , accelerations(_alloc)
    , effort(_alloc)
    , time_from_start()  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _args_type;
  _args_type args;

   typedef uint8_t _wait_type;
  _wait_type wait;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocities_type;
  _velocities_type velocities;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _accelerations_type;
  _accelerations_type accelerations;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  _effort_type effort;

   typedef ros::Duration _time_from_start_type;
  _time_from_start_type time_from_start;


    enum { JOINT_INTERPOLATION = 0u };
     enum { LINEAR_INTERPOLATION = 1u };
     enum { COLLISION_AVOIDANCE = 2u };
     enum { CLOSE_HAND = 10u };
     enum { OPEN_HAND = 11u };
 

  typedef boost::shared_ptr< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> const> ConstPtr;

}; // struct JointTrajectoryPointWithType_

typedef ::jsk_interactive_marker::JointTrajectoryPointWithType_<std::allocator<void> > JointTrajectoryPointWithType;

typedef boost::shared_ptr< ::jsk_interactive_marker::JointTrajectoryPointWithType > JointTrajectoryPointWithTypePtr;
typedef boost::shared_ptr< ::jsk_interactive_marker::JointTrajectoryPointWithType const> JointTrajectoryPointWithTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_interactive_marker

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'jsk_interactive_marker': ['/home/simoneforno/simon_ws/src/jsk_visualization/jsk_interactive_markers/jsk_interactive_marker/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/kinetic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/kinetic/share/jsk_recognition_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "990bd6a1d9e03cc634e576f569783816";
  }

  static const char* value(const ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x990bd6a1d9e03cc6ULL;
  static const uint64_t static_value2 = 0x34e576f569783816ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_interactive_marker/JointTrajectoryPointWithType";
  }

  static const char* value(const ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 JOINT_INTERPOLATION=0\n\
uint8 LINEAR_INTERPOLATION=1\n\
uint8 COLLISION_AVOIDANCE=2\n\
\n\
uint8 CLOSE_HAND=10\n\
uint8 OPEN_HAND=11\n\
\n\
int8 type\n\
string args\n\
bool wait\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
";
  }

  static const char* value(const ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.args);
      stream.next(m.wait);
      stream.next(m.positions);
      stream.next(m.velocities);
      stream.next(m.accelerations);
      stream.next(m.effort);
      stream.next(m.time_from_start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointTrajectoryPointWithType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_interactive_marker::JointTrajectoryPointWithType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "args: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args);
    s << indent << "wait: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
    s << indent << "accelerations[]" << std::endl;
    for (size_t i = 0; i < v.accelerations.size(); ++i)
    {
      s << indent << "  accelerations[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accelerations[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "time_from_start: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_from_start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_INTERACTIVE_MARKER_MESSAGE_JOINTTRAJECTORYPOINTWITHTYPE_H
