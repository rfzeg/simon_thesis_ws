// Generated by gencpp from file rss/ProbArray.msg
// DO NOT EDIT!


#ifndef RSS_MESSAGE_PROBARRAY_H
#define RSS_MESSAGE_PROBARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rss
{
template <class ContainerAllocator>
struct ProbArray_
{
  typedef ProbArray_<ContainerAllocator> Type;

  ProbArray_()
    : params()
    , prob()  {
    }
  ProbArray_(const ContainerAllocator& _alloc)
    : params(_alloc)
    , prob(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _params_type;
  _params_type params;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _prob_type;
  _prob_type prob;




  typedef boost::shared_ptr< ::rss::ProbArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rss::ProbArray_<ContainerAllocator> const> ConstPtr;

}; // struct ProbArray_

typedef ::rss::ProbArray_<std::allocator<void> > ProbArray;

typedef boost::shared_ptr< ::rss::ProbArray > ProbArrayPtr;
typedef boost::shared_ptr< ::rss::ProbArray const> ProbArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rss::ProbArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rss::ProbArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rss

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rss': ['/home/simoneforno/simon_ws/src/rss/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rss::ProbArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rss::ProbArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss::ProbArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss::ProbArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss::ProbArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss::ProbArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rss::ProbArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f31eb659a100c0d2cd41537252e23a4";
  }

  static const char* value(const ::rss::ProbArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f31eb659a100c0dULL;
  static const uint64_t static_value2 = 0x2cd41537252e23a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rss::ProbArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rss/ProbArray";
  }

  static const char* value(const ::rss::ProbArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rss::ProbArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[]   params\n\
float32[]   prob\n\
";
  }

  static const char* value(const ::rss::ProbArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rss::ProbArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.params);
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProbArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rss::ProbArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rss::ProbArray_<ContainerAllocator>& v)
  {
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.params[i]);
    }
    s << indent << "prob[]" << std::endl;
    for (size_t i = 0; i < v.prob.size(); ++i)
    {
      s << indent << "  prob[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prob[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSS_MESSAGE_PROBARRAY_H
