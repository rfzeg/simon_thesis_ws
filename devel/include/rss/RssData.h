// Generated by gencpp from file rss/RssData.msg
// DO NOT EDIT!


#ifndef RSS_MESSAGE_RSSDATA_H
#define RSS_MESSAGE_RSSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rss/RssDatum.h>

namespace rss
{
template <class ContainerAllocator>
struct RssData_
{
  typedef RssData_<ContainerAllocator> Type;

  RssData_()
    : time_start_ns(0)
    , duration_ms(0)
    , mac_address()
    , freq()
    , data()  {
    }
  RssData_(const ContainerAllocator& _alloc)
    : time_start_ns(0)
    , duration_ms(0)
    , mac_address(_alloc)
    , freq(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _time_start_ns_type;
  _time_start_ns_type time_start_ns;

   typedef uint32_t _duration_ms_type;
  _duration_ms_type duration_ms;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _mac_address_type;
  _mac_address_type mac_address;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _freq_type;
  _freq_type freq;

   typedef std::vector< ::rss::RssDatum_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rss::RssDatum_<ContainerAllocator> >::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::rss::RssData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rss::RssData_<ContainerAllocator> const> ConstPtr;

}; // struct RssData_

typedef ::rss::RssData_<std::allocator<void> > RssData;

typedef boost::shared_ptr< ::rss::RssData > RssDataPtr;
typedef boost::shared_ptr< ::rss::RssData const> RssDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rss::RssData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rss::RssData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rss

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rss': ['/home/simoneforno/simon_ws/src/rss/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rss::RssData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rss::RssData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss::RssData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rss::RssData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss::RssData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rss::RssData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rss::RssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98edea83815c1c0eecd2ae4d690d4548";
  }

  static const char* value(const ::rss::RssData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98edea83815c1c0eULL;
  static const uint64_t static_value2 = 0xecd2ae4d690d4548ULL;
};

template<class ContainerAllocator>
struct DataType< ::rss::RssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rss/RssData";
  }

  static const char* value(const ::rss::RssData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rss::RssData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64      time_start_ns\n\
uint32      duration_ms\n\
string[]    mac_address\n\
int16[]     freq\n\
RssDatum[]  data\n\
\n\
================================================================================\n\
MSG: rss/RssDatum\n\
int8[]  rss\n\
";
  }

  static const char* value(const ::rss::RssData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rss::RssData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_start_ns);
      stream.next(m.duration_ms);
      stream.next(m.mac_address);
      stream.next(m.freq);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RssData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rss::RssData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rss::RssData_<ContainerAllocator>& v)
  {
    s << indent << "time_start_ns: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_start_ns);
    s << indent << "duration_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration_ms);
    s << indent << "mac_address[]" << std::endl;
    for (size_t i = 0; i < v.mac_address.size(); ++i)
    {
      s << indent << "  mac_address[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mac_address[i]);
    }
    s << indent << "freq[]" << std::endl;
    for (size_t i = 0; i < v.freq.size(); ++i)
    {
      s << indent << "  freq[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.freq[i]);
    }
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rss::RssDatum_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSS_MESSAGE_RSSDATA_H
