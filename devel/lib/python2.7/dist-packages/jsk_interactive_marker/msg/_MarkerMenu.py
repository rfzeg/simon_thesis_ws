# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_interactive_marker/MarkerMenu.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MarkerMenu(genpy.Message):
  _md5sum = "192d3b78eda584051c0d487463f7de74"
  _type = "jsk_interactive_marker/MarkerMenu"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 MOVE=0
uint8 FORCE_MOVE=1
uint8 SET_ORIGIN=2
uint8 SET_ORIGIN_RHAND=3
uint8 SET_ORIGIN_LHAND=4
uint8 RESET_COORDS=5
uint8 DELETE_FORCE=6
uint8 PUBLISH_MARKER=7
uint8 JOINT_MOVE=8
uint8 RESET_JOINT=9

uint8 SET_MOVE_RARM=10
uint8 SET_MOVE_LARM=11
uint8 SET_MOVE_ARMS=12
uint8 MOVE_CONSTRAINT_T=13
uint8 MOVE_CONSTRAINT_NIL=14
uint8 IK_ROTATION_AXIS_T=15
uint8 IK_ROTATION_AXIS_NIL=16
uint8 USE_TORSO_T=17
uint8 USE_TORSO_NIL=18
int8 USE_FULLBODY=19


uint8 START_GRASP=20
uint8 HARF_GRASP=21
uint8 STOP_GRASP=22

uint8 HEAD_TARGET_POINT=30
uint8 LOOK_AUTO=31

uint8 MANIP_MODE=40
uint8 PICK=41
uint8 TOUCHIT_EXEC=42
uint8 TOUCHIT_PREV=43
uint8 TOUCHIT_CANCEL=44

uint8 LOOK_RARM=45
uint8 LOOK_LARM=46

uint8 PLAN=50
uint8 EXECUTE=51
uint8 PLAN_EXECUTE=52
uint8 CANCEL_PLAN=53

uint8 GENERAL=0
uint8 HEAD_MARKER=1
uint8 RHAND_MARKER=2
uint8 LHAND_MARKER=3
uint8 RLEG_MARKER=4
uint8 LLEG_MARKER=5
uint8 BASE_MARKER=6
uint8 RFINGER_MARKER=7
uint8 LFINGER_MARKER=8

int8 menu
int8 type
string marker_name"""
  # Pseudo-constants
  MOVE = 0
  FORCE_MOVE = 1
  SET_ORIGIN = 2
  SET_ORIGIN_RHAND = 3
  SET_ORIGIN_LHAND = 4
  RESET_COORDS = 5
  DELETE_FORCE = 6
  PUBLISH_MARKER = 7
  JOINT_MOVE = 8
  RESET_JOINT = 9
  SET_MOVE_RARM = 10
  SET_MOVE_LARM = 11
  SET_MOVE_ARMS = 12
  MOVE_CONSTRAINT_T = 13
  MOVE_CONSTRAINT_NIL = 14
  IK_ROTATION_AXIS_T = 15
  IK_ROTATION_AXIS_NIL = 16
  USE_TORSO_T = 17
  USE_TORSO_NIL = 18
  USE_FULLBODY = 19
  START_GRASP = 20
  HARF_GRASP = 21
  STOP_GRASP = 22
  HEAD_TARGET_POINT = 30
  LOOK_AUTO = 31
  MANIP_MODE = 40
  PICK = 41
  TOUCHIT_EXEC = 42
  TOUCHIT_PREV = 43
  TOUCHIT_CANCEL = 44
  LOOK_RARM = 45
  LOOK_LARM = 46
  PLAN = 50
  EXECUTE = 51
  PLAN_EXECUTE = 52
  CANCEL_PLAN = 53
  GENERAL = 0
  HEAD_MARKER = 1
  RHAND_MARKER = 2
  LHAND_MARKER = 3
  RLEG_MARKER = 4
  LLEG_MARKER = 5
  BASE_MARKER = 6
  RFINGER_MARKER = 7
  LFINGER_MARKER = 8

  __slots__ = ['menu','type','marker_name']
  _slot_types = ['int8','int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       menu,type,marker_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MarkerMenu, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.menu is None:
        self.menu = 0
      if self.type is None:
        self.type = 0
      if self.marker_name is None:
        self.marker_name = ''
    else:
      self.menu = 0
      self.type = 0
      self.marker_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2b().pack(_x.menu, _x.type))
      _x = self.marker_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.menu, _x.type,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marker_name = str[start:end].decode('utf-8')
      else:
        self.marker_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2b().pack(_x.menu, _x.type))
      _x = self.marker_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.menu, _x.type,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marker_name = str[start:end].decode('utf-8')
      else:
        self.marker_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
